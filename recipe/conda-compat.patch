diff --git a/build/make.depends b/build/make.depends
index d65e3bd..0915103 100644
--- a/build/make.depends
+++ b/build/make.depends
@@ -18,6 +18,10 @@ statistics.o:  ../modules/statistics.f90 parameters.mod  utilities.mod sort.mod
 	$(OBJBUILDCMD)
 statistics.mod: ../modules/statistics.f90 parameters.mod  utilities.mod sort.mod statistics.o
 	$(MODBUILDCMD)
+cstrings.o:  ../modules/cstrings.f90
+	$(OBJBUILDCMD)
+cstrings.mod: ../modules/cstrings.f90 cstrings.o
+	$(MODBUILDCMD)
 functions.o:  ../modules/functions.f90 parameters.mod
 	$(OBJBUILDCMD)
 functions.mod: ../modules/functions.f90 parameters.mod functions.o
@@ -46,9 +50,9 @@ data_structures.o:  ../modules/data_structures.f90  parameters.mod utilities.mod
 	$(OBJBUILDCMD)
 data_structures.mod: ../modules/data_structures.f90  parameters.mod utilities.mod data_structures.o
 	$(MODBUILDCMD)
-Base_class.o:  ../classes/Base_class.f90  ../classes/../prefix.h utilities.mod parameters.mod
+Base_class.o:  ../classes/Base_class.f90  ../classes/../prefix.h utilities.mod parameters.mod cstrings.mod
 	$(OBJBUILDCMD)
-base_cl.mod: ../classes/Base_class.f90  ../classes/../prefix.h utilities.mod parameters.mod Base_class.o
+base_cl.mod: ../classes/Base_class.f90  ../classes/../prefix.h utilities.mod parameters.mod cstrings.mod Base_class.o
 	$(MODBUILDCMD)
 Unit_class.o:  ../classes/Unit_class.f90 base_cl.mod
 	$(OBJBUILDCMD)
diff --git a/classes/Base_class.f90 b/classes/Base_class.f90
index 8e2e221..258794b 100644
--- a/classes/Base_class.f90
+++ b/classes/Base_class.f90
@@ -41,6 +41,7 @@ MODULE Base_cl
 
   USE utilities
   USE parameters
+  USE cstrings
   IMPLICIT NONE
   PRIVATE :: calendarDateToJulianDate
   PRIVATE :: coordinatedUniversalTime
@@ -622,8 +623,15 @@ CONTAINS
        RETURN
     END IF
 
+    ! If PREFIX has not been set, default to current directory
+    ! for every subdir (backwards compatibility)
+    IF (CSTR_LEN(PREFIX) == 0) THEN
+       s2 = "."
+       RETURN
+    END IF
+
     ! Otherwise, return <PREFIX>/<subdir>
-    s2 = TRIM(PREFIX) // "/" // subdir
+    s2 = FROM_CSTR(PREFIX) // "/" // subdir
 
   END FUNCTION resolveDirectory
 
@@ -631,7 +639,7 @@ CONTAINS
   SUBROUTINE setAccessToDataFiles()
 
     IMPLICIT NONE
-    OORB_DATA_DIR = resolveDirectory("share/oorb", "OORB_DATA")
+    OORB_DATA_DIR = resolveDirectory("share/openorb", "OORB_DATA")
 
   END SUBROUTINE setAccessToDataFiles
 
diff --git a/configure b/configure
index a5119b1..781bb6d 100755
--- a/configure
+++ b/configure
@@ -100,7 +100,7 @@ rm -f "$prefix_h"
 echo '!!!!! GENERATED BY configure SCRIPT; DO NOT EDIT !!!!!' >> "$prefix_h"
 echo 'CHARACTER(len=FNAME_LEN) :: PREFIX = "" &' >> "$prefix_h"
 echo "$PREFIX" | fold -b -w 60 | sed 's|.*|  \& // "&" \&|' >> "$prefix_h"
-echo '  & // ""' >> "$prefix_h"
+echo '  & // CHAR(0)' >> "$prefix_h"
 
 include_file=Makefile.include
 rm -f $include_file
diff --git a/make.config b/make.config
index 49fc5ed..25539f0 100644
--- a/make.config
+++ b/make.config
@@ -70,6 +70,7 @@ F90_MODULE_SOURCES = parameters.f90 \
                      random.f90 \
                      sort.f90 \
                      statistics.f90 \
+                     cstrings.f90 \
                      functions.f90 \
                      linal.f90 \
                      estimators.f90 \
diff --git a/modules/cstrings.f90 b/modules/cstrings.f90
new file mode 100644
index 0000000..70d039b
--- /dev/null
+++ b/modules/cstrings.f90
@@ -0,0 +1,33 @@
+! ---------------------------------------------------
+! Functions to convert between C and FORTRAN strings
+!
+MODULE CSTRINGS
+IMPLICIT NONE
+
+CONTAINS
+
+! ------------------------
+PURE INTEGER FUNCTION CSTR_LEN(s)  ! Returns the length of a C
+CHARACTER(*), INTENT(IN) :: s      ! string (that can have any number of
+INTEGER :: i                       ! NULL characters at the end)
+
+CSTR_LEN = LEN_TRIM(s)
+DO i = 1, LEN_TRIM(s)
+   IF (s(i:i) == CHAR(0)) THEN
+      CSTR_LEN = i - 1
+      EXIT
+   END IF
+END DO
+
+END FUNCTION CSTR_LEN
+
+
+! ------------------------
+FUNCTION FROM_CSTR(s) RESULT(s2)   ! Returns a FORTRAN string from a C
+CHARACTER(*),INTENT(IN) :: s       ! string (that can have any number of
+CHARACTER(CSTR_LEN(s)) :: s2       ! NULL characters at the end)
+s2 = s
+END FUNCTION FROM_CSTR
+
+
+END MODULE CSTRINGS
